buildscript {
    ext {
        commonsCodecVersion = '1.12'
        commonsCollectionsVersion = '4.3'
        commonsLangVersion = '3.8.1'
        guavaVersion = '27.1-jre'
        springBootVersion = '2.1.4.RELEASE'
        lettuceVersion = '5.1.6.RELEASE'
        lombokVersion = '1.18.6'
    }
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.11'
        classpath 'net.rdrei.android.buildtimetracker:gradle-plugin:0.11.0'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group 'moe.pine.est'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'http://repository.jboss.org/nexus/content/groups/public/' }
    }


    // ----- JaCoCo ---------------------------------------

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = '0.8.3'
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom 'com.google.cloud:google-cloud-bom:0.82.0-alpha'
        }
        dependencies {
            dependency 'javax.servlet:javax.servlet-api:4.0.1'
            dependency "org.projectlombok:lombok:$lombokVersion"

            // Guava
            dependency "com.google.guava:guava:$guavaVersion"

            // Apache Commons
            dependency "org.apache.commons:commons-lang3:$commonsLangVersion"
            dependency "org.apache.commons:commons-collections4:$commonsCollectionsVersion"
            dependency "commons-codec:commons-codec:$commonsCodecVersion"

            // Utilities
            dependency "com.github.spullara.mustache.java:compiler:0.9.6"
            dependency 'com.sangupta:murmur:1.0.0'
            dependency 'moe.pine:heroku-addons:0.2.1'

            // Redis
            dependency "io.lettuce:lettuce-core:$lettuceVersion"

            // Test
            dependency 'junit:junit:4.12'
            dependency 'org.mockito:mockito-core:2.24.5'
            dependency 'org.powermock:powermock-reflect:2.0.0'
        }
    }
    dependencies {
        // Lombok
        annotationProcessor 'org.projectlombok:lombok'
        compileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'

        // Logging
        implementation 'org.slf4j:slf4j-api'
        implementation 'ch.qos.logback:logback-classic'

        // Utilities
        implementation 'com.google.guava:guava'
        implementation 'org.apache.commons:commons-lang3'
        implementation 'org.apache.commons:commons-collections4'

        // Test
        testImplementation 'junit:junit'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.powermock:powermock-reflect'
    }
}


// ----- JaCoCo -------------------------------------------

task jacocoMerge(type: JacocoMerge) {
    dependsOn(subprojects.jacocoTestReport.dependsOn)
    mustRunAfter(subprojects.jacocoTestReport.mustRunAfter)
    destinationFile = file("${buildDir}/jacoco/test.exec")
    executionData = files(subprojects.jacocoTestReport.executionData)
        .filter { f -> f.exists() }
}

jacocoTestReport {
    dependsOn(jacocoMerge)
    reports {
        xml.enabled = true
        html.enabled = true
    }

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
}


// ----- Build Time Tracker -------------------------------

apply plugin: 'build-time-tracker'

buildtimetracker {
    reporters {
        summary {
          ordered true
          barstyle 'ascii'
        }
    }
}


// ----- Configuration ------------------------------------

def confFiles = fileTree('conf').include('**/*.yml', '**/*.json')
confFiles.forEach { File src ->
    def dest = new File(
        src.absolutePath.replace("${rootDir.absolutePath}/conf", rootDir.absolutePath))
    if (src.name.endsWith('.yml')) {
        dest.write("# This YAML source file was generated by the Gradle.\n\n")
    } else {
        dest.setBytes([] as byte[])
    }
    dest.append(src.readBytes())
}
